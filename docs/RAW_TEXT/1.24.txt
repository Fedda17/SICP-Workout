I have to modify the timed-prime-test procedure with the fermat test method:

(define square (lambda (x) (* x x)))
(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) 
         n)
        ((divides? test-divisor n) 
         test-divisor)
        (else (find-divisor 
               n 
               (next test-divisor)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define square (lambda (x) (* x x)))
(define (smallest-divisor n)
  (find-divisor n 2))

(define (prime-range-test x y)
	(define (next-odd x)
		(if (even? x) (+ x 1) (+ x 2))
	)
	(cond ((> x y)
			(newline)
			(display "END"))
			(else (timed-prime-test x)
				  (prime-range-test (next-odd x) y)))
)


(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (current-inexact-milliseconds)))

(define (start-prime-test n start-time)
  (if (fast-prime? n 1)
      (report-prime (- (current-inexact-milliseconds) 
                       start-time)) (display " NO")))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))
  
  FERMAT TEST PRIME:
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
  
(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) 
         (fast-prime? n (- times 1)))
        (else false)))
		
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder 
          (square (expmod base (/ exp 2) m))
          m))
        (else
         (remainder 
          (* base (expmod base (- exp 1) m))
          m))))
		  
I expected the runtime between 1000 and 1000000 would differ with log(1000)
This estimation is wrong because there's no way to measure accurately due the probabilistic factor
The runtime for numbers around 1000 stay in the range between 0.025 and 0.041 in general
and those around 1000000 stays in the range between 0.048 and 0.055 
I don't have the knowledge to explain why the runtime changes like this 