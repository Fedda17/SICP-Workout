(define (count-change amount)
  (cc amount 5))

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) 
             (= kinds-of-coins 0)) 
         0)
        (else 
         (+ (cc amount (- kinds-of-coins 1))
            (cc (- amount (first-denomination 
                           kinds-of-coins))
                kinds-of-coins)))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))

They ask me to change the program in the first point so that the pennies are tried first, then dimes in two ways:

First way:
(define (count-change amount)
  (cc amount 0))

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) 
             (> kinds-of-coins 5)) 
         0)
        (else 
         (+ (cc amount (+ kinds-of-coins 1))
            (cc (
                           kinds-of-coins))
                kinds-of-coins)))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))

Second way:
(define (count-change amount)
  (cc amount 5))

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) 
             (= kinds-of-coins 0)) 
         0)
        (else 
         (+ (cc amount (- kinds-of-coins 1))
            (cc (- amount (first-denomination 
                           kinds-of-coins))
                kinds-of-coins)))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 5) 1)
        ((= kinds-of-coins 4) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 2) 25)
        ((= kinds-of-coins 1) 50)))


Point 2:
Verify the correctness of the computation. I'll use trace for this. Change the call to restrict the changes only with pennies and nickles:

//Mettere stack trace sotto tenda?
Stack trace for the normal order:
>(cc 5 2)
> (cc 5 1)
> >(cc 5 0)
< <0
> >(cc 4 1)
> > (cc 4 0)
< < 0
> > (cc 3 1)
> > >(cc 3 0)
< < <0
> > >(cc 2 1)
> > > (cc 2 0)
< < < 0
> > > (cc 1 1)
> > > >(cc 1 0)
< < < <0
> > > >(cc 0 1)
< < < <1
< < < 1
< < <1
< < 1
< <1
< 1
> (cc 0 2)
< 1
<2
2

stack trace for the altered order:
> (cc 5 2)
>(cc 5 2)
> (cc 5 1)
> >(cc 5 0)
< <0
> >(cc 4 1)
> > (cc 4 0)
< < 0
> > (cc 3 1)
> > >(cc 3 0)
< < <0
> > >(cc 2 1)
> > > (cc 2 0)
< < < 0
> > > (cc 1 1)
> > > >(cc 1 0)
< < < <0
> > > >(cc 0 1)
< < < <1
< < < 1
< < <1
< < 1
< <1
< 1
> (cc 0 2)
< 1
<2
2

The altered procedure is wrong: it must invert the order of coins to which the total is subtracted from.

(define (cc amount kinds-of-coins)
  (trace-define (invert-order-coins amount k)
  (cond ((= amount 0) 1)
        ((or (< amount 0) 
             (= kinds-of-coins k)) 
         0)
        (else 
         (+ (invert-order-coins amount (+ k 1))
            (invert-order-coins (- amount (first-denomination 
                           kinds-of-coins))
                kinds-of-coins)))))
(invert-order-coins amount 0))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50))
)    


stack trace altered form:
>(invert-order-coins 5 0)
> (invert-order-coins 5 1)
> >(invert-order-coins 5 2)
< <0
> >(invert-order-coins 0 2)
< <1
< 1
> (invert-order-coins 0 2)
< 1
<2
2

stack trace normal form:
> (cc 5 2)
>(cc 5 2)
> (cc 5 1)
> >(cc 5 0)
< <0
> >(cc 4 1)
> > (cc 4 0)
< < 0
> > (cc 3 1)
> > >(cc 3 0)
< < <0
> > >(cc 2 1)
> > > (cc 2 0)
< < < 0
> > > (cc 1 1)
> > > >(cc 1 0)
< < < <0
> > > >(cc 0 1)
< < < <1
< < < 1
< < <1
< < 1
< <1
< 1
> (cc 0 2)
< 1
<2
2

The depth in the normal form is deeper because it compares first higher coin values, but the result is the same.
Also the shape of the tree is different because the recursion stops when the kind of coin "exhausts" the value in increasing order and doesn't compute
the result for the kind of coins that when subtracted give the amount a negative value
