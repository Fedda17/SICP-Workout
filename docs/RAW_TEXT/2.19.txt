This exercise asks me to make a change in the program "coin-change", I have to build a data abstraction for the type of coins there's need to change. ex: us coins, uk coins and euro


The text provides already the modified procedure:

(define (cc amount coin-values)
  (cond ((= amount 0) 
         1)
        ((or (< amount 0) 
             (no-more? coin-values)) 
         0)
        (else
         (+ (cc 
             amount
             (except-first-denomination 
              coin-values))
            (cc 
             (- amount
                (first-denomination 
                 coin-values))
             coin-values)))))

Which I'll need to call like:
(cc 100 us-coins)


example of type of coins:
(define us-coins 
  (list 50 25 10 5 1))

(define uk-coins 
  (list 100 50 20 10 5 2 1 0.5))


I have to implement the selectors:
except-first-denomination, first-denomination

and the predicate no-more? 

in terms of primitive list operations:

(define (first-denomination coins-type) (car coins-type))
(define (except-first-denomination coins-type) (cdr coins-type))
(define (no-more? coins-type) (null? coins-type))

TEST RESULT --- POSITIVE

The order of the list of the coin's value shouldn't affect the value but just the shape of the process, let's see...

(define us-coins 
  (list 25 50 5 10 1))


TEST RESULT --- AFFIRMATIVE 

  (list 25 50 5 10 1))
>  (cc 12 us-coins)
4

let's try completely inverted for good measure

(define us-coins 
  (list 1 5 10 25 50))


TEST RESULT --- AFFIRMATIVE

> (cc 12 us-coins)
4
> (cc 100 us-coins)
292
> 

