For this exercise, I use the newton method written in the book:

(define (newton-transform g)
  (lambda (x)
    (- x (/ (g x) 
            ((deriv g) x)))))

(define (newtons-method g guess)
  (fixed-point (newton-transform g) 
               guess))
			   
(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) 
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
  
  (define (deriv g)
  (lambda (x)
    (/ (- (g (+ x dx)) (g x))
       dx)))


(define dx 0.00001)
			   
			   
And use it in combination with a cubic procedure that accepts three arguments to find the approximate values for the solution of the equation x^3 + a x^2 + bx + c = 0 given a,b,c as inputs

cubic is a function that returns a function as a value
this function maps x->  x^3 + a x^2 + bx + c

(define (cubic a b c)
	(lambda (x) (+ (* a x x x) (* b x x) c))
)

if I test this procedure, with simple values with the newthon method, what does computes?

--TEST
with a=3, b=2 and c=1 returns -0.9999999999994775 which is an approximation of -1
if I try a=5, b=2 and c=10 returns -1.4949292630555424 which is an approximation of -1,495