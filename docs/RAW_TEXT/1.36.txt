The fixed point procedure is

(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) 
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
  
Which I have to modify so it prints the approximations it generates, the primitive procedures I have to use are newline and display, which i don't know how they work. So I'll give them a try.
I decide to use this expressions that makes the required operations in a single step:

(lambda (x)		(newline)
               (display x)
               )
			   
And I change the procedure try in order to make a parameter that accept the expression that will be the printed.

(define (print-number x) (newline) (display x)) 

(define (print-fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) 
       tolerance))
  (define (try print guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try (print-number next) next))))
  (try (print-number first-guess) first-guess))
  
I have to find a solution to  x^x = 1000 using the print-fixed-point and see visibly how many steps it will take:

As the first value 2.0, it took 33 steps, now I have to compare it with the same procedure but using average dumping for a tool of approximation.

(define (average x y) (/ (+ x y) 2))


In order to compute the average dumping, I pass this procedure as an argument:
(lambda (x) (average x (/ (log 1000) (log x))))

And it computes the solution in 9 steps, so the process is reduced at most by 4 times.

