This exercise asks me to build 2 compund datas:
a point and a segment
a point is 2 integers glued togeted, and a segment is 2 points glued together.
To represent these datas I need the usual constructor and selector.

The exercise suggests me to try the procedures that represent the datas by using this one:
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

the constructor for point:

(define (make-point x y) (if (and (number? x) (number? y)) (cons x y) (error "required numbers for point")))
(define (x-point point) (car point))
(define (y-point point) (cdr point))

> (print-point (make-point 3 5))
(3,5)
> (define a-point (make-point 1 3))
> (print-point a-point)
(1,3)

Solved the first part 

Now for representing the segment, I guess the operations are the same:
(define (make-segment p1 p2) 
    (define (is-point? p) (and (number? (car p)) (number? (cdr p))))
(if (and (is-point? p1) (is-point? p2)) (cons p1 p2) (error "required points for segments.")))
(define (start-segment seg) (car seg))
(define (end-segment seg) (cdr seg))


test the segment representation:
> (make-segment (make-point 3 4) (make-point 7 8))
'((3 . 4) 7 . 8)
> (define seg1 (make-segment (make-point 3 4) (make-point 7 8)))
> (start-segment seg1)
'(3 . 4)
> (end-segment seg1)
'(7 . 8)
> (print-point (end-segment seg1))

remember that the interpreter abbreviates the printed value of a pair of pairs.


(define (midpoint-segment seg) 
    (let ((mid-x (/ (+ (car (car seg)) (cdr (car seg))) 2))
            (mid-y (/ (+ (car (cdr seg)) (cdr (cdr seg))) 2)))
            (make-point mid-x mid-y))
)

--- TEST RESULT:

 (midpoint-segment seg1)
'(3 1/2 . 7 1/2)

negative

I think the order of car and cdr is wrong:

(define (midpoint-segment seg) 
    (let ((mid-x (/ (+ (car (car seg)) (car (cdr seg))) 2))
            (mid-y (/ (+ (cdr (car seg)) (cdr (cdr seg))) 2)))
            (make-point mid-x mid-y))
)

--- TEST RESULT:

(midpoint-segment seg1)
'(5 . 6)
> 

Now the result is correct. and this concludes the test.