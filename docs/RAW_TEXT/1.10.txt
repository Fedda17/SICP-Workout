Let's see what this Ackermann's procedure is all about...

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))
				 
				 
Testing the procedure with these expressions:

(A 1 10)
(A 2 4)
(A 3 3)

The values seem to be all powers of 2, in order 1024, 65536 and 65536, especially (A 2 4) == (A 3 3)

So with this basic observation, I have to see what's the relationship between A's inputs and output with n parameterized


(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))

f seems to be a simple 2*n

g seems to be a simple 2^n

h seems to be g applied n times