This exercise asks me to define a procedure that uses the dotted-tail notation for 
returning a list that mathes the parity of the first argument.

The dotted-tail-notation is a way to define procedure that takes an arbitrary number of arguments provided the formal parameter after the dot "."


(define (same-parity x . z)
    (cons x (if (null? z) 
                '()
                (if (= (remainder x (car z)) x) (cons (car z) (same-parity x . (cdr z))) (same-parity x . (cdr z)))
    ))
)  

TEST RESULT --- NEGATIVE:

remainder: contract violation
  expected: integer?
  given: #<procedure:cdr>

  IN (remainder x (car z))

What happened?

Try substitution model:

(same-parity 1 2 3 4 5 6 7)
-> (cons 1 (if (null? (list 2 3 4 5 6 7)) '() 
            (if (= (remainder 1 (car (list 2 3 4 5 6 7))) (cons (car (list 2 3 4 5 6 7)) (same-parity 1 . )))))

Understood, I imagine I don't have to use the dot in procedure call!

redefine:
(define (same-parity x . z)
    (cons x (if (null? z) 
                '()
                (if (= (remainder x (car z)) x) (cons (car z) (same-parity x (cdr z))) (same-parity x (cdr z)))
    ))
)

TEST RESULT --- NEGATIVE:

remainder: contract violation
  expected: integer?
  given: '(3 4 5 6 7)

Didn't work because at each recursive call I add an additional unnecessary pair with (cons x ...) before the if

redefine:

(define (same-parity x . z)
    (define (append-parity z) 
        (if (null? z) 
                '()
                (if (= (remainder x (car z)) x) (cons (car z) (append-parity (cdr z))) (append-parity (cdr z)))
        )
    )
    (cons x (append-parity z))
)

TEST RESULT --- NEGATIVE:

'(1 2 3 4 5 6 7)

the condition isn't appropriate for this type of task.


I think a condition of this type is sufficient to test if two numbers have the same parity:
(= (remainder 1 2) (remainder 7 2))

redefine:

(define (same-parity x . z)
    (define (append-parity z)
        (define (same-parity? x y) (= (remainder x 2) (remainder y 2))) 
        (if (null? z) 
                '()
                (if (same-parity? x (car z)) (cons (car z) (append-parity (cdr z))) (append-parity (cdr z)))
        )
    )
    (cons x (append-parity z))
)

TEST RESULT --- POSITIVE:

> (same-parity 1 2 3 4 5 6 7)
'(1 3 5 7)
> (same-parity 2 3 4 5 6 7)
'(2 4 6)
> 
