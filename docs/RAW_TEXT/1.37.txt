I have to conjure a high-order procedure that is a k-term finite continued fraction and see if what I created can approximate the value 1/phi if the arguments for the numerator and denominator is 1, I
have to start with this template:
(cont-frac n d k)

this is how I'll call it to check if it evaluates to 1/phi
(cont-frac (lambda (i) 1.0)
           (lambda (i) 1.0)
           k)
		   
I can see that this procedure is a summation so for the definition I'll bring the pattern for that procedure again:

(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))

if k = 1, the continued fraction stops at n1/d1

if k = 2, the continued fraction becomes n1/(d1 + n2/ d2)

so the k element must be termed with the expression nk/dk
and the k + 1 element must be termed with  nk/(dk + nk+1/ dk+1) and so on...

So, the cont-frac has this shape:

(define (cont-frac n d k)	
	(cond ((= k 0) (/ (n k) (d k)))
			((> k 0) (/ (n k) (+ (d k) (cont-frac n 
							  (lambda (k) (+ (d k) (/ (d (- k 1)) (n (- k 1)))))
							  (- k 1)))
					  )
			)
	)
)
	

This first attempt is chaotic, so I have to make some changes and verify manually the behaviour of the procedure, also for the moment forget the sum procedure

if k = 2
(n 2)/ (cont-frac n (lambda (k) (+ (d k) (/ (d (- k 1)) (n (- k 1))))) 1) ->
(n 2) / (n 1) / (cont-frac n (lambda () (+ (d k) (/ (d (- k 1)) (n (- k 1))))) 0)
(n 2) / (n 1) / (n 0) /   

This iteration doesn't make the correct continued fraction for the value I want, with this modification I think it will make it, let's test it...
--- TEST

The value I got with k=10 is 0.6915941924219781
What's the value of 1/phi that's the expectation I want from this procedure?
0.61803398875
So the value computed is not accurate enough since the exercise requires that it must be correct till 4 decimal places...
I try to increase k...
This procedure simply doesn't work... I think that the order in which the numerator and denominator is placed is iteratively wrong, I try to substitute manually for k = 2...

(n 2) / ((d 2) + (cont-frac n 
							  (lambda (k) (+ (d k) (/ (d (- k 1)) (n (- k 1)))))
							  1))
							  
(n 2) / ((d 2) + ((n 1) / ((d 1) + (cont-frac n 
											d	)
							  0))
(n 2) / ((d 2) + ((n 1) / ((d 1) + ((n 0) / (d 0)))

Trying to find a value with a calculator with k = 2 gave me 0,5, but this function gave me 0,66666 that's the supposed value that gives the correct procedure with k = 3, so in the end the previous procedure
was unnecessary convoluted and by combining steps with a lambda I think it jumped over some steps for the continued fraction, so the correct recursive procedure is:

(define (cont-frac n d k)	
	(cond ((= k 0) (/ (n k) (d k)))
			((> k 0) (/ (n k) (+ (d k) (cont-frac n 
							  d
							  (- k 1)))
					  )
			)
	)
)

This procedure is enough for finding 1/phi correct to the 4th decimal place with k = 10